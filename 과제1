const express = require("express");
const router = express.Router();
const cookieParser = require("cookie-parser");

const { Post, Comment, Like } = require("../models");
const { Op } = require("sequelize");
const authMiddleWare = require("../middlewares/auth-middleware");

const app = express();
app.use(cookieParser());



// 게시글 작성
router.post("/posts", authMiddleWare, async (req, res) => {
    const { title, content } = req.body;
    const user_id = res.locals.user.userId;
    try {
        const posts = await Post.create({
            title,
            content,
            user_id,
        });

        // res.json({posts});
        // res.json(posts);
        res.send(posts);
    } catch (error) {
        console.error(error);
        res.status(500).send({ message: error.message });
    }
});

// 특정 게시글 수정
// 비밀번호 비교 후 비밀번호 일치할 때만 수정
router.put("/posts/:postId", authMiddleWare, async (req, res) => {
    // postId 값 다르게 주고 try catch 빼고 실행
    try {
        const { postId } = req.params;
        const { title, content } = req.body;

        // 조회 실패
        const post = await Post.findByPk(postId);
        if (post === null) {
            return res.status(400).send({ message: "?? 게시글이 없습니다." });
        }

        const result = await Post.update(
            { title: title, content: content },
            { where: { postId } }
        );

        console.log("result", result);

        res.send({ message: "success" });
    } catch (error) {
        console.error(error);

        res.status(500).send({ message: error.message });
    }
});

// 특정 게시글 삭제
router.delete("/posts/:postId", authMiddleWare, async (req, res) => {
    try {
        const { postId } = req.params;

        // 조기 리턴
        const _post = await Post.findByPk(postId);
        if (_post === null) {
            return res.status(400).send({ message: "?? 게시글이 없습니다." });
        }

        // 게시글 삭제
        await Post.destroy({
            where: { postId },
        });
        // 게시글에 속한 댓글들 삭제
        await Comment.destroy({
            where: { post_id: postId },
        });

        // console.log(comments);

        res.send("삭제완료!");
    } catch (error) {
        console.error(error);

        res.status(500).send({ message: error.message });
    }
});

module.exports = router;

const express = require("express");
const router = express.Router();
const { Post, likes, User } = require("../models");
const authMiddleWare = require("../middlewares/auth-middleware");

router.get("/likes/posts", authMiddleWare, async (req, res) => {
    const user_id = res.locals.user.userId;
    console.log(res.locals.user);

    const data = await likes.findAll({
        where: { user_id: user_id },
        raw: true,
        attributes: ["Post.user_id", "Post.title", "Post.content", "Post.like_cnt"],
        include: [
            {
                model: Post,
                attributes: [],
            },
        ],
        order: [[Post, "like_cnt", "desc"]],
    });

    console.log("********", data);

    res.status(200).json({ data });
});

router.put("/posts/:postId/like", authMiddleWare, async (req, res) => {
    const user_id = res.locals.user.userId;
    const { postId } = req.params;

    const existlike = await likes.findOne({
        where: { user_id, post_id: postId },
    });

    try {
        if (!existlike) {
            await likes.create({
                user_id: user_id,
                post_id: postId,
            });

            await Post.increment({ like_cnt: 1 }, { where: { postId } });
            return res.status(200).send("좋아요");
        } else {
            likes.destroy({
                where: { post_id: postId },
            });

            await Post.decrement({ like_cnt: 1 }, { where: { postId } });
            return res.status(200).send("싫어요");
        }
    } catch (error) {
        res.status(400).send({ errorMessage: "에러" });
    }
});

module.exports = router;
app.js
const express = require("express");
const app = express();

const loginRouter = require("./routers/login");
const registerRouter = require("./routers/register");
const postRouter = require("./routers/posts");
const commentRouter = require("./routers/comments");
const likesRouter = require("./routers/likes");

app.use(express.json());

app.use("/api", [
    registerRouter,
    loginRouter,
    postRouter,
    commentRouter,
    likesRouter,
]);

app.get("/", (req, res) => {
    res.send("Welcome to my page");
});

app.listen(8080, () => {
    console.log("서버 접속");
});


const express = require("express");
const router = express.Router();

const { Post, Comment, Like } = require("../models");
const { Op } = require("sequelize");
const authMiddleWare = require("../middlewares/auth-middleware");

// 특정 게시글에 속한 댓글 전체 조회
router.get("/posts/:postId/comments", async (req, res) => {
    try {
        const { postId } = req.params;

        // 조기 리턴
        const post = await Post.findByPk(postId);
        if (post === null) {
            return res.status(400).send({ message: "?? 게시글이 없습니다." });
        }
        const comment = await Comment.findAll({ order: [["createdAt", "desc"]] });

        res.send(comment);
    } catch (error) {
        console.error(error);

        res.status(500).send({ message: error.message });
    }
});

// 특정 게시글에 속한 댓글 작성
router.post("/posts/:postId/comments", authMiddleWare, async (req, res) => {
    try {
        const post_id = req.params.postId;
        const { content } = req.body;
        const user_id = res.locals.user.userId;

        // 조기 리턴
        const post = await Post.findByPk(post_id);
        if (post === null) {
            return res.status(400).send({ message: "?? 게시글이 없습니다." });
        }

        if (content === "") {
            return res.status(400).send("?? 댓글 내용을 입력해주세요");
        }

        const comment = await Comment.create({
            content,
            post_id,
            user_id,
        });

        res.send(comment);
    } catch (error) {
        console.error(error);
        res.status(500).send(error.message);
    }
});

// 특정 게시글에 속한 특정 댓글 수정
router.put(
    "/posts/:postId/comments/:commentId",
    authMiddleWare,
    async (req, res) => {
        try {
            const { postId, commentId } = req.params;
            const { content } = req.body;

            // 조기 리턴
            const post = await Post.findByPk(postId);
            if (post === null) {
                return res.status(400).send({ message: "?? 게시글이 없습니다." });
            }

            const _comment = await Comment.findByPk(commentId);
            if (_comment === null) {
                return res.status(400).send({ message: "?? 댓글이 없습니다." });
            }

            if (content === "") {
                return res.status(400).send("?? 댓글 내용을 입력해주세요");
            }

            await Comment.update(
                {
                    content: content,
                },
                { where: { commentId } }
            );

            res.send({ message: "success" });
        } catch (error) {
            console.error(error);

            res.status(500).send(error.message);
        }
    }
);

// 특정 게시글에 속한 특정 댓글 삭제
router.delete(
    "/posts/:postId/comments/:commentId",
    authMiddleWare,
    async (req, res) => {
        try {
            const { postId, commentId } = req.params;

            // 조기 리턴
            const post = await Post.findByPk(postId);
            if (post === null) {
                return res.status(400).send({ message: "?? 게시글이 없습니다." });
            }

            const _comment = await Comment.findByPk(commentId);
            if (_comment === null) {
                return res.status(400).send({ message: "?? 댓글이 없습니다." });
            }

            await Comment.destroy({
                where: { commentId },
            });

            res.send("삭제완료!");
        } catch (error) {
            console.error(error);

            res.status(500).send(error.message);
        }
    }
);

module.exports = router;
